*foldout.txt*   Outline-based folding for any filetype.

Author:  Matt Superdock
License: MIT

This plugin is only available if 'compatible' is not set.

INTRODUCTION                                    *foldout*

|foldout| is an outline-based folding plugin for vim & neovim. Its unique
feature is that folds are determined by Markdown-style headings within comments,
and these headings are automatically highlighted. |foldout| also provides a
suite of functions for manipulating and navigating between headings.

|foldout| uses vim's 'commentstring' option to compute default heading patterns.
As a result, if you're using a filetype-specific plugin that sets
'commentstring', no further configuration is necessary. Just type the comment
prefix, then a string of heading symbols (by default, "#"), and |foldout| will
recognize a heading.

INSTALLATION                                    *foldout-quickstart*

Use your preferred installation method; for example, with vim-plug, use:

`Plug 'msuperdock/vim-foldout'`

If your .vimrc uses |:mkview| or |:loadview| to save and restore view data,
remove these commands and set |g:foldout_save|. (The |:mkview| and |:loadview|
commands need to be called in certain sequence with |foldout| commands, and
|foldout| handles this for you.) For example:

`let g:foldout_save = 1`

By default, |foldout| is automatically enabled in all buffers whose filenames
contain a dot (see |g:foldout_files| to customize this), and can be manually
enabled & disabled using |foldout#enable()|, |foldout#disable()|, and
|foldout#toggle()|.

FUNCTIONS                                       *foldout-functions*

|foldout| provides the following functions. You can bind a key to a function in
your .vimrc using, for example:

`noremap <silent> <tab> :call foldout#toggle_fold()<cr>`

This binds "<tab>" to the |foldout#toggle_fold()| function in normal, visual,
select, and operator-pending modes. The "<silent>" flag tells vim to call the
function without first displaying the keybinding.

Enable:

| function                 | description                                       |
| ------------------------ | ------------------------------------------------- |
| |foldout#enable()|         | Enable foldout in the current buffer.             |
| |foldout#disable()|        | Disable foldout in the current buffer.            |
| |foldout#toggle()|         | Toggle foldout in the current buffer.             |

Headings:

| function                 | description                                       |
| ------------------------ | ------------------------------------------------- |
| |foldout#level()|          | Get level of heading, or 0 if not at a heading.   |
| |foldout#demote()|         | Demote current heading. Don't change children.    |
| |foldout#promote()|        | Promote current heading. Don't change children.   |
| |foldout#tab()|            | Demote if at heading, else simulate tab.          |
| |foldout#shift_tab()|      | Promote if at heading, else simulate shift-tab.   |

The |foldout#tab()| and |foldout#shift_tab()| functions are designed to be
bound to tab and shift-tab in insert mode; for example:

`inoremap <tab> <c-\><c-o>:silent call foldout#tab()<cr>`
`inoremap <s-tab> <c-\><c-o>:silent call foldout#shift_tab()<cr>`

Navigation:

| function                 | description                                       |
| ------------------------ | ------------------------------------------------- |
| |foldout#parent()|         | Go to parent heading.                             |
| |foldout#down()|           | Go to next sibling heading.                       |
| |foldout#up()|             | Go to previous sibling heading.                   |
| |foldout#down_graphical()| | Go to next visible heading of any level.          |
| |foldout#up_graphical()|   | Go to previous visible heading of any level.      |
| |foldout#top()|            | Go to first sibling heading.                      |
| |foldout#bottom()|         | Go to last sibling heading.                       |
| |foldout#child()|          | Go to first child heading.                        |
| |foldout#goto()|           | Go to heading with given name & level.            |

Folding:

| |foldout#toggle_fold()|    | Toggle fold at cursor.                            |
| |foldout#show()|           | Open all folds.                                   |
| |foldout#focus()|          | Close all folds but those needed to see cursor.   |
| |foldout#center()|         | Redraw so that cursor is vertically centered.     |

Insertion:

| |foldout#append()|         | Go to end of current section, enter insert mode.  |
| |foldout#open()|           | Create heading below and enter insert mode.       |

Query:

| |foldout#syntax()|         | View the stack of syntax groups at the cursor.    |

OPTIONS                                         *foldout-options*

|foldout| provides the following option variables for configuration. The
prefix column indicates whether the option is a global option, a buffer-local
option, or both. Buffer-local options override global options where both are
present. You can set an option in your .vimrc using, for example:

`let g:foldout_heading_symbol = '*'`

| prefix | variable                | default | description                     |
| ------ | ----------------------- | ------- | ------------------------------- |
| g      | |foldout_files|           | "*.*"   | Pattern determining whether to  |
|        |                         |         |   enable |foldout|.               |
| g      | |foldout_save|            | 0       | Allow foldout to save & restore |
|        |                         |         |   view data.                    |
| b, g   | |foldout_heading_symbol|  | "#"     | Repeated symbol indicating      |
|        |                         |         |   heading level.                |
| b, g   | |foldout_max_level|       | 6       | Maximum allowed heading level.  |
|        |                         |         |                                 |
| b, g   | |foldout_min_fold|        | 1       | Minimum level at which to       |
|        |                         |         |   enable folding.               |
| b      | |foldout_heading_comment| | 1       | Highlight heading delimiters as |
|        |                         | (0)*    |   comments.                     |
| b      | |foldout_heading_string|  | **      | Heading pattern, in             |
|        |                         | ("%s")* |   'commentstring' format.       |

* This is an alternative default, for Markdown files only.
** The default for |foldout_heading_string| is the value of 'commentstring'.

Options governing the |foldout#append()| function:

| b, g   | |foldout_append_pattern|  | "\@!"   | Pattern determining whether to  |
|        |                         |         |   insert empty line.            |
| b, g   | |foldout_append_text|     | ""      | Prefix text to insert.          |
|        |                         |         |                                 |

KNOWN ISSUES                                    *foldout-known-issues*

If you see unexpected highlighting, use `:call foldout#syntax()` to see the
stack of syntax groups at the cursor. If |foldout| is enabled, you should expect
to see `foldoutFile`, followed by one or more |foldout|-related groups, followed
by zero or more non-|foldout|-related groups, for example:

`foldoutFile, foldoutChildren, foldoutBody1, foldoutContent, javaScriptIdentifier -> Identifier`

If you do not see this general pattern, you are experiencing a |foldout|-related
issue. The two known issues are:

(1) Files beginning with keywords.

If a file begins with a keyword, then no headings are detected. For example,
consider the following JavaScript file:

`var x = 2`
`// # print`
`console.log(x)`

The `print` heading is not detected. The issue is that |foldout| relies on
matching the entire file as a region, but `var` is declared as a keyword in
vim's JavaScript syntax file, and keywords have higher precedence than regions.
An easy fix is to add an empty line to the top of the file.

For a more permanent fix, modify the syntax file to replace any `keyword` that
may occur at the beginning of the file with a `match`. For example, for the
JavaScript keyword `var`, download the default JavaScript syntax file
(https://github.com/vim/vim/blob/master/runtime/syntax/javascript.vim) to
`~/.vim/syntax/javascript.vim` (if using vim) or
`~/.config/nvim/syntax/javascript.vim` (if using neovim). vim will now use the
downloaded syntax file instead of the default syntax file. Find the line
declaring `var` as a keyword:

`syn keyword javaScriptIdentifier arguments this var let`

Then remove `var` and add a line recognizing `var` using `match`:

`syn keyword javaScriptIdentifier arguments this let`
`syn match javaScriptIdentifier "\<var\>"`

The heading is now detected, and the JavaScript highlighting is unchanged.

(2) Syntax files using `contains=ALL` or `contains=CONTAINED`.

A syntax file may use `contains=ALL` to indicate that within a match or region,
all match groups are in scope, which may cause unexpected highlighting when used
with |foldout|. The issue is that foldout relies on carefully controlling where
its own syntax groups may match, which is impossible in the presence of the
`contains=ALL` construct. (Similar remarks apply to `contains=CONTAINED`.)

The better syntax files avoid these constructs in favor of explicit lists of
contained clusters and syntax groups. If you encounter this issue, consider
using a vim plugin that provides an alternative syntax file for the affected
filetype, or modify the syntax file yourself to replace the `ALL` or `CONTAINED`
keywords wherever they appear.

CREDITS                                         *foldout-credits*

|foldout| relies critically on the FastFold plugin, which is slightly modified
and packaged with |foldout|.

DOCUMENTATION                                   *foldout-documentation*

Below is documentation for each option and function provided by |foldout|.

Options:

                                                *g:foldout_files*
g:foldout_files             string (default "?*")
        Pattern matched against file names to determine whether to enable
        |foldout|. If the empty string, never automatically enable |foldout|.

                                                *g:foldout_save*
g:foldout_save              number (default 0)
        Indicates whether to let |foldout| handle saving & loading view data.
                        
        If 1, |foldout| calls |:loadview| and |:mkview| at the appropriate
        times in buffers where |foldout| is enabled, to save view data (like
        folds & cursor position) according to the value of 'viewoptions'.
                        
        If 0, |foldout| does not save or load view data. In this case, it is
        recommended not to use |:loadview| and |:mkview| at all, since calling
        these commands must be done in a particular order relative to
        |foldout| commands.

                                                *g:foldout_heading_symbol*
                                                *b:foldout_heading_symbol*
g:foldout_heading_symbol    string (default "#") 
b:foldout_heading_symbol    local to buffer
        The one-character string to use as the repeated character in headings.

                                                *g:foldout_max_level*
                                                *b:foldout_max_level*
g:foldout_max_level         number (default 6)
b:foldout_max_level         local to buffer
        The upper limit on the number of heading levels.

                                                *g:foldout_min_fold*
                                                *b:foldout_min_fold*
g:foldout_min_fold          number (default 1)
b:foldout_min_fold          local to buffer
        The first level at which to enable folding.

                                                *b:foldout_heading_comment*
b:foldout_heading_comment   number (default 1)
                            local to buffer
        Indicates whether to highlight heading delimiters as comments.

                                                *b:foldout_heading_string*
b:foldout_heading_string    string (defaults to value of 'commentstring')
                            local to buffer
        A template for a heading, in the same format as 'commentstring'. The
        "%s" in the value is replaced with the heading symbols and title.

                                                *g:foldout_append_pattern*
                                                *b:foldout_append_pattern*
g:foldout_append_pattern    string (default "\@!")
b:foldout_append_pattern    local to buffer
        Pattern matched against last line of section in |foldout#append()|. If
        it matches, an empty line is inserted before appending text. The
        default value is the null pattern, to always insert an empty line.

                                                *g:foldout_append_text*
                                                *b:foldout_append_text*
g:foldout_append_text       string (default "")
b:foldout_append_text       local to buffer
        Prefix text to insert in |foldout#append()|.

Functions:

foldout#enable()                                *foldout#enable()*
        Enable |foldout| in the current buffer. If called while |foldout| is
        already enabled, apply current values of the buffer option variables.

foldout#disable()                               *foldout#disable()*
        Disable |foldout| in the current buffer.

foldout#toggle()                                *foldout#toggle()*
        Enable or disable |foldout|.

foldout#level([{line}])                         *foldout#level()*
        Determine the current heading level at {line}, or at the cursor if
        {line} is not given. Return 0 if not at a heading.

foldout#demote()                                *foldout#demote()*
        If at a heading, demote the heading. Do not change the child headings.

foldout#promote()                               *foldout#promote()*
        If at a heading, promote the heading. Do not change the child headings.

foldout#tab()                                   *foldout#tab()*
        Demote heading if at a heading, otherwise simulate tab. Designed to be
        bound to <tab> in insert mode.

foldout#shift_tab()                             *foldout#shift_tab()*
        Promote heading if at a heading, otherwise simulate shift-tab.
        Designed to be bound to <shift-tab> in insert mode.

foldout#parent()                                *foldout#parent()*
        Go to parent heading, if there is one.

foldout#down()                                  *foldout#down()*
        Go to next sibling heading, if at a heading and if there is one. If
        not at a heading, go to the next heading if it is a first child.

foldout#up()                                    *foldout#up()*
        Go to previous sibling heading, if at a heading and if there is one.

foldout#down_graphical()                        *foldout#down_graphical()*
        Go to next visible heading, if there is one.

foldout#up_graphical()                          *foldout#up_graphical()*
        Go to previous visible heading, if there is one.

foldout#top()                                   *foldout#top()*
        Go to first sibling if at a heading, else to beginning of section.

foldout#bottom()                                *foldout#bottom()*
        Go to last sibling if at a heading, else to end of section.

foldout#child()                                 *foldout#child()*
        Go to first nonempty line inside a heading, if there is one.

foldout#goto({heading}, {level} [, {enter}])    *foldout#goto()*
        Search for string {heading} at level number {level}; go to heading if
        found. If {enter} is given, enter the section. Return 1 if heading is
        not found, 0 otherwise.

foldout#toggle_fold()                           *foldout#toggle_fold()*
        Toggle current fold, moving down one line if at a header.

foldout#show()                                  *foldout#show()*
        Show all folds in buffer.

foldout#focus()                                 *foldout#focus()*
        Focus the cursor by closing all other folds.

foldout#center()                                *foldout#center()*
        Center the cursor vertically, without moving the cursor.

foldout#append()                                *foldout#append()*
        Append a new line to the end of the current section, enter insert mode.

foldout#open([{cursor}])                        *foldout#open()*
        Open a new heading line, meant as the foldout analogue of "o". If
        {cursor} is given, create heading at cursor, regardless of outline
        structure. Otherwise, create heading at the end of the section.

foldout#syntax()                                *foldout#syntax()*
        View the stack of syntax groups at the cursor.

